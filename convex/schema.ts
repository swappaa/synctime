import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  timers: defineTable({
    teamId: v.union(v.id("teams"), v.null()),
    taskId: v.union(v.id("tasks"), v.null()),
    projectId: v.union(v.id("projects"), v.null()),
    notes: v.optional(v.string()),
    timeSpent: v.optional(v.string()),
    startTimer: v.optional(v.string()),
    endTimer: v.optional(v.string()),
    isRunning: v.optional(v.boolean()),
  }),
  projects: defineTable({
    accountId: v.string(),
    clientId: v.id("clients"),
    assignedProjectId: v.id("assignedProjects"),
    projectName: v.string(),
    projectCode: v.optional(v.string()),
    dateStart: v.optional(v.string()),
    dateEnd: v.optional(v.string()),
    notes: v.optional(v.string()),
    isShowReportWhoManange: v.boolean(),
    isShowReportEveryone: v.boolean(),
  }).index("by_account", ["accountId"]),
  clients: defineTable({
    accountId: v.string(),
    name: v.string(),
    address: v.string(),
    preferredCurrency: v.optional(v.string()),
    projectId: v.id("projects"),
    contactId: v.id("clientContacts"),
  }).index("by_account", ["accountId"]),
  tasks: defineTable({
    accountId: v.string(),
    taskName: v.string(),
    billableRate: v.optional(v.string()),
    isBillable: v.boolean(),
    isCommonTask: v.boolean(),
    isAddExistingProject: v.boolean(),
    isArchived: v.boolean(),
  }).index("by_account", ["accountId"]),
  clientContacts: defineTable({
    clientId: v.union(v.id("clients"), v.null()),
    firstName: v.string(),
    LastName: v.string(),
    email: v.optional(v.string()),
    title: v.optional(v.string()),
    officeNumber: v.optional(v.string()),
    mobileNumber: v.optional(v.string()),
    faxNumber: v.optional(v.string()),
  }),
  teams: defineTable({
    accountId: v.string(),
    firstName: v.string(),
    lastName: v.string(),
    workEmail: v.string(),
    type: v.union(v.literal("employee"), v.literal("contractor")),
    userType: v.union(
      v.literal("member"),
      v.literal("manager"),
      v.literal("administrator")
    ),
    userRole: v.optional(v.array(v.string())),
    capacity: v.optional(v.string()),
    billableRate: v.optional(v.string()),
    costRate: v.optional(v.string()),
    timeZone: v.optional(v.string()),
    photo: v.optional(v.string()),
    assignedProjectId: v.id("assignedProjects"),
    timerId: v.id("timers"),
    ownerAccountId: v.id("ownerAccount"),
  }).index("by_account", ["accountId"]),
  assignedProjects: defineTable({
    projectId: v.id("projects"),
    teamId: v.id("teams"),
  }),
  ownerAccount: defineTable({
    teamId: v.id("teams"),
    companyName: v.string(),
    isSubscribe: v.boolean(),
    endTrial: v.string(),
  }),
});
